// If you make changes to this file, you'll need to run protoc to updated the
// generated files by running the following command:
//
// protoc -I=semantic_model_generator/protos/ --python_out=semantic_model_generator/protos/ --pyi_out=semantic_model_generator/protos/ semantic_model_generator/protos/semantic_model.proto

syntax = "proto3";

package semantic_model_generator;

// AggregationType defines a list of various aggregations.
enum AggregationType {
    aggregation_type_unknown = 0;
    sum = 1;
    avg = 2;
    median = 7;
    min = 3;
    max = 4;
    count = 5;
    count_distinct = 6;
}

// ColumnKind defines various kinds of columns, mainly categorized into
// dimensions and measures.
enum ColumnKind {
    column_kind_unknown = 0;
    // A column containing categorical values such as names, countries, dates.
    dimension = 1;
    // A column containing numerical values such as revenue, impressions, salary.
    measure = 2;
    // A column containing date/time data.
    time_dimension = 3;
}

// Column is analogous to a database column and defines various semantic properties
// of a column.  A column can either simply be a column in the base database schema
// or it can be an arbitrary expression over the base schema, e.g.
// `base_column1 + base_column2`.
message Column {
    // A descriptive name for this column.
    string name = 1;
    // A list of other terms/phrases used to refer to this column.
    repeated string synonyms = 2;
    // A brief description about this column, including things like what data this
    // column has.
    string description = 3;
    // The SQL expression for this column. Could simply be a base table column name
    // or an arbitrary SQL expression over one or more columns of the base table.
    string expr = 4;
    // The data type of this column.
    string data_type = 5;
    // The kind of this column - dimension or measure.
    ColumnKind kind = 6;
    // If true, assume that this column has unique values.
    bool unique = 7;
    // If no aggregation is specified, then this is the default aggregation
    // applied to this column in context of a grouping.
    AggregationType default_aggregation = 8;
    // Sample values of this column.
    repeated string sample_values = 9;
}

// Dimension columns contain categorical values (e.g. state, user_type, platform).
// NOTE: If modifying this protobuf, make appropriate changes in to_column_format()
// of snowpilot/semantic_context/utils/utils.py.
message Dimension {
    // A descriptive name for this dimension.
    string name = 1;
    // A list of other terms/phrases used to refer to this dimension.
    repeated string synonyms = 2;
    // A brief description about this dimension, including things like
    // what data this dimension has.
    string description = 3;
    // The SQL expression defining this dimension. Could simply be a physical column name
    // or an arbitrary SQL expression over one or more columns of the physical table.
    string expr = 4;
    // The data type of this dimension.
    string data_type = 5;
    // If true, assume that this dimension has unique values.
    bool unique = 6;
    // Sample values of this column.
    repeated string sample_values = 7;
}

// Time dimension columns contain time values (e.g. sale_date, created_at, year).
// NOTE: If modifying this protobuf, make appropriate changes in to_column_format()
// of snowpilot/semantic_context/utils/utils.py.
message TimeDimension {
    // A descriptive name for this time dimension.
    string name = 1;
    // A list of other terms/phrases used to refer to this time dimension.
    repeated string synonyms = 2;
    // A brief description about this time dimension, including things like
    // what data it has, the timezone of values, etc.
    string description = 3;
    // The SQL expression defining this time dimension. Could simply be a physical
    // column name or an arbitrary SQL expression over one or more columns of the
    // physical table.
    string expr = 4;
    // The data type of this time dimension.
    string data_type = 5;
    // If true, assume that this time dimension has unique values.
    bool unique = 6;
    // Sample values of this time dimension.
    repeated string sample_values = 7;
}

// Measure columns contain numerical values (e.g. revenue, impressions, salary).
// NOTE: If modifying this protobuf, make appropriate changes in to_column_format()
// of snowpilot/semantic_context/utils/utils.py.
message Measure {
    // A descriptive name for this measure.
    string name = 1;
    // A list of other terms/phrases used to refer to this measure.
    repeated string synonyms = 2;
    // A brief description about this measure, including things like what data
    // it has.
    string description = 3;
    // The SQL expression defining this measure. Could simply be a physical column
    // name or an arbitrary SQL expression over one or more physical columns of
    // the underlying physical table.
    string expr = 4;
    // The data type of this measure.
    string data_type = 5;
    // If no aggregation is specified, then this is the default aggregation
    // applied to this measure in contxt of a grouping.
    AggregationType default_aggregation = 6;
    // Sample values of this measure.
    repeated string sample_values = 7;
}

// Filter represents a named SQL expression that's used for filtering.
message NamedFilter {
    // A descriptive name for this filter.
    string name = 1;
    // A list of other term/phrases used to refer to this column.
    repeated string synonyms = 2;
    // A brief description about this column, including details of what this filter
    // is typically used for.
    string description = 3;
    // The SQL expression of this filter.
    string expr = 4;
}

// FullyQualifiedTable is used to represent three part table names -
// (database, schema, table).
message FullyQualifiedTable {
    string database = 1;
    string schema = 2;
    string table = 3;
}

// Table is analogous to a database table and provides a simple view over an
// existing database table.  A table can leave out some columns from the base
// table and/or introduce new derived columns.
message Table {
    // A descriptive name for this table.
    string name = 1;
    // A list of other term/phrases used to refer to this table.
    repeated string synonyms = 2;
    // A brief description of this table, including details of what kinds of
    // analysis is it typically used for.
    string description = 3;
    // Fully qualified name of the underlying base table.
    FullyQualifiedTable base_table = 4;

    // We allow two formats for specifying logical columns of a table:
    // 1. As a list of columns.
    // 2. As three separate list of dimensions, time dimensions, and measures.
    // For the external facing yaml specification, we have chosen to go with (2).
    // However, for the time being we'll support both (1) and (2) and continue
    // using (1) as the internal representation.
    repeated Column columns = 5;
    repeated Dimension dimensions = 9;
    repeated TimeDimension time_dimensions = 10;
    repeated Measure measures = 11;


    // Predefined filters on this table, if any.
    repeated NamedFilter filters = 8;
    // NEXT_TAG: 12.
}

// The semantic context relevant to generating SQL for answering a data question.
message SemanticModel {
    // A descriptive name of the project.
    string name = 1;
    // A brief description of this project, including details of what kind of
    // analysis does this project enable.
    string description = 2;
    // List of tables in this project.
    repeated Table tables = 3;
}